{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v9GsKkCwItZi",
        "outputId": "7dc4d7b7-e96d-4248-e24a-a3336d58f689"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting pyspark\n",
            "  Downloading pyspark-3.5.3.tar.gz (317.3 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m317.3/317.3 MB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Building wheels for collected packages: pyspark\n",
            "  Building wheel for pyspark (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pyspark: filename=pyspark-3.5.3-py2.py3-none-any.whl size=317840625 sha256=a2c8657a69b8c8989c37495a82e548ca58532c970fc5a3e6fbe03b46a2982c0e\n",
            "  Stored in directory: /root/.cache/pip/wheels/1b/3a/92/28b93e2fbfdbb07509ca4d6f50c5e407f48dce4ddbda69a4ab\n",
            "Successfully built pyspark\n",
            "Installing collected packages: pyspark\n",
            "Successfully installed pyspark-3.5.3\n"
          ]
        }
      ],
      "source": [
        "!pip install pyspark pandas"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iL7KW1NgMwlm",
        "outputId": "e9f98a11-0be9-48ec-d855-3a3cda2772f6"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "from pyspark.sql.functions import col, dayofmonth, month, year, to_date\n",
        "\n",
        "# Initialize a Spark session\n",
        "spark = SparkSession.builder.appName(\"SalesDataAnalysis\").getOrCreate()\n",
        "\n",
        "# Create the DataFrame\n",
        "data = [\n",
        "    (\"P001\", \"Product A\", \"Electronics\", 10, 200, \"2022-01-10\"),\n",
        "    (\"P002\", \"Product B\", \"Electronics\", 30, 150, \"2022-02-11\"),\n",
        "    (\"P003\", \"Product C\", \"Clothing\", 20, 120, \"2022-03-10\"),\n",
        "    (\"P004\", \"Product D\", \"Clothing\", 15, 120, \"2022-02-12\"),\n",
        "    (\"P005\", \"Product E\", \"Kitchen\", 25, 90, \"2022-04-13\"),\n",
        "    (\"P006\", \"Product F\", \"Kitchen\", 5, 300, \"2022-01-14\"),\n",
        "]\n",
        "\n",
        "columns = [\"ProductID\", \"ProductName\", \"Category\", \"Quantity\", \"Price\", \"Date\"]\n",
        "\n",
        "df = spark.createDataFrame(data, columns)\n",
        "\n",
        "# Convert 'Date' to date type\n",
        "df = df.withColumn(\"Date\", to_date(col(\"Date\")))\n",
        "\n",
        "# Extract day, month, and year\n",
        "df = df.withColumn(\"Day\", dayofmonth(col(\"Date\"))) \\\n",
        "       .withColumn(\"Month\", month(col(\"Date\"))) \\\n",
        "       .withColumn(\"Year\", year(col(\"Date\")))\n",
        "\n",
        "# Drop the original 'Date' column\n",
        "df = df.drop(\"Date\")\n",
        "\n",
        "# Show the final DataFrame\n",
        "df.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2DnQaobnIrvg",
        "outputId": "b42f63ca-124c-4b7e-d77c-83c3392c06f3"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql.functions import sum\n",
        "\n",
        "# Calculate total revenue\n",
        "df = df.withColumn(\"TotalRevenue\", col(\"Quantity\") * col(\"Price\"))\n",
        "\n",
        "# Group by year, month, and category, and sum the total revenue\n",
        "monthly_revenue = df.groupBy(\"Year\", \"Month\", \"Category\") \\\n",
        "    .agg(sum(\"TotalRevenue\").alias(\"TotalRevenue\")) \\\n",
        "    .orderBy(\"Year\", \"Month\", \"Category\")\n",
        "\n",
        "# Show the result\n",
        "print(\"Total Revenue for Each Category Per Month:\")\n",
        "monthly_revenue.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FSR56QrWJYVt",
        "outputId": "79c94dc3-b7e5-417c-cfce-4732e5ac42e0"
      },
      "outputs": [],
      "source": [
        "# Find the product with the lowest price in each category\n",
        "lowest_price_products = df.groupBy(\"Category\") \\\n",
        "    .agg({\"Price\": \"min\"}) \\\n",
        "    .join(df, (df[\"Price\"] == col(\"min(Price)\")) & (df[\"Category\"] == col(\"Category\"))) \\\n",
        "    .select(\"Category\", \"ProductName\", \"Price\")\n",
        "\n",
        "# Show the result\n",
        "print(\"Products with Lowest Price in Each Category:\")\n",
        "lowest_price_products.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QzwWhfjxJi0i",
        "outputId": "0bf4ec24-19e9-4e4c-dc50-2141b88899af"
      },
      "outputs": [],
      "source": [
        "# Monthly sales trend analysis\n",
        "monthly_trends = df.groupBy(\"Year\", \"Month\") \\\n",
        "    .agg(sum(\"Quantity\").alias(\"TotalQuantity\")) \\\n",
        "    .orderBy(\"Year\", \"Month\")\n",
        "\n",
        "# Show the result\n",
        "print(\"Monthly Sales Trends:\")\n",
        "monthly_trends.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 672
        },
        "id": "F3blTBi2JsRL",
        "outputId": "6b432326-bc24-4b65-dee4-75f21673a7aa"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Total revenue by category\n",
        "total_revenue_by_category = df.groupBy(\"Category\") \\\n",
        "    .agg(sum(\"TotalRevenue\").alias(\"TotalRevenue\")) \\\n",
        "    .toPandas()\n",
        "\n",
        "# Plot total revenue by category\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(total_revenue_by_category['Category'], total_revenue_by_category['TotalRevenue'], color='skyblue')\n",
        "plt.title('Total Revenue by Category')\n",
        "plt.xlabel('Category')\n",
        "plt.ylabel('Total Revenue')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
